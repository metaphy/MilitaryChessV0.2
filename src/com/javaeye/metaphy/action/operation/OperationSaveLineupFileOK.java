/**
 * @author Gou Ming Shi
 * http://metaphy.javaeye.com/
 * Nov 23, 2009
 * All Rights Reserved
 */
package com.javaeye.metaphy.action.operation;

import static com.javaeye.metaphy.game.Game.LINEUP_FILE_EXT;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import com.javaeye.metaphy.action.BaseAction;
import com.javaeye.metaphy.game.GameBoard;
import com.javaeye.metaphy.game.GamePanel;
import com.javaeye.metaphy.game.SaveLineupRadioPane;
import com.javaeye.metaphy.game.OperationButton.Operations;
import com.javaeye.metaphy.model.Located;

public class OperationSaveLineupFileOK extends BaseAction {
	private SaveLineupRadioPane pane = null;

	public OperationSaveLineupFileOK(SaveLineupRadioPane pane) {
		this.pane = pane;
	}

	/*
	 * Display the Radio-Panel
	 */
	public void actionPerformed(ActionEvent e) {
		// Open file chooser
		JFileChooser chooser = new JFileChooser();
		chooser.setFileFilter(new LineupFileFilter());
		chooser.setSelectedFile(new File("Noname1" + LINEUP_FILE_EXT));
		chooser.showSaveDialog(game.getContainer());
		File f = chooser.getSelectedFile();

		if (f != null) {
			String filePathName = f.getPath();

			if (!filePathName.endsWith(LINEUP_FILE_EXT)) {
				filePathName = filePathName + LINEUP_FILE_EXT;
			}

			f = new File(filePathName);
			FileOutputStream fos = null;
			try {
				fos = new FileOutputStream(f);
				// Write the generated output stream bytes
				fos.write(outputStreamBytes());
				fos.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			} finally {
				try {
					fos.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}

			// Hide this panel
			GamePanel panel = game.getPanel();
			panel.getSaveLineupRadioPane().setVisible(false);

			// Show/Hide other Operation buttons
			panel.setAllOpertionButtonsVisible(true);
			panel.setOneOpertionButtonVisible(Operations.GIVE_UP, false);
			panel.setOneOpertionButtonVisible(Operations.PASS, false);
		}
	}

	/**
	 * Generate the output stream bytes
	 * 
	 * @return
	 */
	private byte[] outputStreamBytes() {
		GameBoard gameBoard = game.getGameBoard();
		byte[] bytes = new byte[50];
		/*
		 * The first 16 bytes in ASCII are "Generated by MC" & 0x00
		 */
		bytes[0] = 0x47;
		bytes[1] = 0x65;
		bytes[2] = 0x6E;
		bytes[3] = 0x65;
		bytes[4] = 0x72;
		bytes[5] = 0x61;
		bytes[6] = 0x74;
		bytes[7] = 0x65;
		bytes[8] = 0x64;
		bytes[9] = 0x20;
		bytes[10] = 0x62;
		bytes[11] = 0x79;
		bytes[12] = 0x20;
		bytes[13] = 0x4D;
		bytes[14] = 0x43;
		bytes[15] = 0x00;

		bytes[16] = 0x57; // W
		bytes[17] = 0x04; // EOT - End of transmission
		bytes[18] = 0x00;
		bytes[19] = 0x00;

		int index = 20;
		
		if (pane.getChoosed() == Located.NORTH) {
			// 限制对board数组取值区域
			for (int j = 5; j >= 0; j--) {
				for (int i = 10; i >= 6; i--) {
					if (gameBoard.getBoard()[i][j]== GameBoard.INVALID) {
						bytes[index++] = GameBoard.INVALID;
					} else {
						bytes[index++] = (byte) ((int) gameBoard.getBoard()[i][j] - 16);
					}
				}
			}
		} else {
			for (int j = 11; j <= 16; j++) {
				for (int i = 6; i <= 10; i++) {
					bytes[index++] = gameBoard.getBoard()[i][j];
				}
			}
		}

		return bytes;
	}

	/*
	 * Filter of the lineup files
	 */
	private class LineupFileFilter extends FileFilter {
		@Override
		public boolean accept(File f) {
			return f.getName().toLowerCase().endsWith(LINEUP_FILE_EXT)
					|| f.isDirectory();
		}

		@Override
		public String getDescription() {
			return LINEUP_FILE_EXT.replace(".", "");
		}

	}
}
